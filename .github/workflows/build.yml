name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - '*'

jobs:

  # createrelease:
  #   name: Create Release
  #   runs-on: [ubuntu-latest]
  #   steps:
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       draft: false
  #       prerelease: false
  #   - name: Output Release URL File
  #     run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
  #   - name: Save Release URL File for publish
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: release_url
  #       path: release_url.txt

  build:
    name: Build packages
    # needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                pyinstaller -F -w -n LinearStitch LS_GUI.py &&
                cd dist/ &&
                zip -r9 LinearStitch LinearStitch.app/
            OUT_FILE_NAME: LinearStitch.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -w -n LinearStitch LS_GUI.py
            OUT_FILE_NAME: LinearStitch.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Upload to latest release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.ref == 'refs/heads/master'
      run: |
        cd dist
        gh api repos/${GITHUB_REPOSITORY}/releases/tags/latest | jq -r '.assets[] | [.url] | @tsv' | xargs -n 1 gh api -X DELETE || true
        gh release upload --repo ${GITHUB_REPOSITORY} --clobber latest ${{ matrix.OUT_FILE_NAME}}

    # - name: Load Release URL File from release job
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: release_url
    # - name: Get Release File Name & Upload URL
    #   id: get_release_info
    #   shell: bash
    #   run: |
    #     value=`cat release_url/release_url.txt`
    #     echo ::set-output name=upload_url::$value
    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.get_release_info.outputs.upload_url }}
    #     asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
    #     asset_name: ${{ matrix.OUT_FILE_NAME}}
    #     asset_content_type: ${{ matrix.ASSET_MIME}}